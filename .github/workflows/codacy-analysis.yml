name: Codacy Analysis

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.ts'
      - '**/*.js'
      - '**/*.tsx'
      - '**/*.jsx'
      - '**/*.py'
      - '**/*.java'
      - '**/*.go'
      - '**/*.dart'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.codacy/**'
      - '.github/workflows/codacy-analysis.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.ts'
      - '**/*.js'
      - '**/*.tsx'
      - '**/*.jsx'
      - '**/*.py'
      - '**/*.java'
      - '**/*.go'
      - '**/*.dart'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.codacy/**'
      - '.github/workflows/codacy-analysis.yml'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codacy-analysis:
    name: Codacy Static Analysis
    runs-on: ubuntu-latest
    env:
      STORE_PATH: ""
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: 10.0.0
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Prepare Codacy CLI
        run: |
          echo "Setting up Codacy CLI..."
          chmod +x ./.codacy/cli.sh
          
          # Ensure tools are installed
          echo "Installing Codacy tools..."
          ./.codacy/cli.sh install
          
          # Verify CLI is working
          echo "Verifying Codacy CLI..."
          ./.codacy/cli.sh version
        
      - name: Run Codacy Analysis
        id: codacy-analysis
        run: |
          echo "Starting Codacy analysis..."
          
          # Create output directory
          mkdir -p codacy-output
          
          # Run analysis with proper error handling
          set +e  # Don't exit on error
          
          echo "Running Codacy analysis..."
          ./.codacy/cli.sh analyze --format sarif --output codacy-output/codacy-results.sarif 2>&1 | tee codacy-output/codacy-analysis.log
          CODACY_EXIT_CODE=$?
          
          echo "Codacy analysis completed with exit code: $CODACY_EXIT_CODE"
          
          # Check if SARIF file was created and is valid
          if [ -f "codacy-output/codacy-results.sarif" ]; then
            SARIF_SIZE=$(stat -f%z "codacy-output/codacy-results.sarif" 2>/dev/null || stat -c%s "codacy-output/codacy-results.sarif" 2>/dev/null || echo "0")
            echo "SARIF file size: $SARIF_SIZE bytes"
            
            if [ "$SARIF_SIZE" -gt 100 ]; then
              # Validate SARIF structure
              if jq empty codacy-output/codacy-results.sarif 2>/dev/null; then
                echo "‚úÖ Valid SARIF file generated"
                echo "sarif_valid=true" >> $GITHUB_OUTPUT
                echo "sarif_file=codacy-output/codacy-results.sarif" >> $GITHUB_OUTPUT
              else
                echo "‚ùå Invalid SARIF JSON structure"
                echo "sarif_valid=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ùå SARIF file too small or empty"
              echo "sarif_valid=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå SARIF file not created"
            echo "sarif_valid=false" >> $GITHUB_OUTPUT
          fi
          
          # Generate analysis summary
          echo "## Codacy Analysis Summary" > codacy-output/summary.md
          echo "" >> codacy-output/summary.md
          echo "**Exit Code:** $CODACY_EXIT_CODE" >> codacy-output/summary.md
          echo "**SARIF File:** $([ -f 'codacy-output/codacy-results.sarif' ] && echo '‚úÖ Generated' || echo '‚ùå Missing')" >> codacy-output/summary.md
          echo "**File Size:** ${SARIF_SIZE:-0} bytes" >> codacy-output/summary.md
          echo "" >> codacy-output/summary.md
          
          if [ -f "codacy-output/codacy-results.sarif" ] && [ "$SARIF_SIZE" -gt 100 ]; then
            # Extract issue counts from SARIF
            TOTAL_ISSUES=$(jq '[.runs[].results[]] | length' codacy-output/codacy-results.sarif 2>/dev/null || echo "0")
            ERROR_ISSUES=$(jq '[.runs[].results[] | select(.level == "error")] | length' codacy-output/codacy-results.sarif 2>/dev/null || echo "0")
            WARNING_ISSUES=$(jq '[.runs[].results[] | select(.level == "warning")] | length' codacy-output/codacy-results.sarif 2>/dev/null || echo "0")
            INFO_ISSUES=$(jq '[.runs[].results[] | select(.level == "note" or .level == "info")] | length' codacy-output/codacy-results.sarif 2>/dev/null || echo "0")
            
            echo "**Issues Found:**" >> codacy-output/summary.md
            echo "- Total: $TOTAL_ISSUES" >> codacy-output/summary.md
            echo "- Errors: $ERROR_ISSUES" >> codacy-output/summary.md
            echo "- Warnings: $WARNING_ISSUES" >> codacy-output/summary.md
            echo "- Info: $INFO_ISSUES" >> codacy-output/summary.md
          fi
          
          # Always continue to upload artifacts
          exit 0
        
      - name: Upload SARIF to GitHub Security
        if: steps.codacy-analysis.outputs.sarif_valid == 'true'
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: ${{ steps.codacy-analysis.outputs.sarif_file }}
          category: codacy-analysis
          
      - name: Upload Analysis Artifacts
        uses: actions/upload-artifact@v4.3.0
        if: always()
        with:
          name: codacy-analysis-results
          path: |
            codacy-output/
            .codacy/logs/
          retention-days: 30
          
      - name: Comment Analysis Summary on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('codacy-output/summary.md')) {
              const summary = fs.readFileSync('codacy-output/summary.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîç Codacy Analysis Results\n\n${summary}`
              });
            }
