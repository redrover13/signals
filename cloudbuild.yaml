# Cloud Build configuration for Dulce de Saigon Agent Ecosystem CI/CD
# This file defines the continuous integration and deployment pipeline.
#
# The pipeline includes the following stages:
# 1. Install Dependencies: Fetches all project dependencies using pnpm.
# 2. Run Linting: Performs static analysis on the codebase.
# 3. Run Unit Tests: Executes tests for projects affected by the latest changes.
# 4. Terraform Validate: Validates the Terraform infrastructure code.
# 5. Build Container: Builds the Docker image for the agent-runner service.
# 6. Scan Container for Vulnerabilities: Scans the Docker image for security vulnerabilities.
# 7. Push to Artifact Registry: Pushes the built image to Google Artifact Registry.
# 8. Deploy Cloud Function: Deploys the event-parser Cloud Function.
# 9. Deploy Cloud Run Service: Deploys the agent-runner service to Cloud Run.
#
# This pipeline is designed for a production environment and ensures that
# all code is tested and securely deployed. It adheres to the project's
# standards for security, compliance, and Vietnamese market requirements.

steps:
  # Step 1: Install project dependencies using pnpm
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Install Dependencies'
    args: ['-pnpm', 'install']
    entrypoint: 'npx'

  # Step 2: Run linting for all affected projects
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run Linting'
    args: ['-pnpm', 'nx', 'affected', '--target=lint', '--headless']
    entrypoint: 'npx'

  # Step 3: Run unit tests for all affected projects
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run Unit Tests'
    args: ['-pnpm', 'nx', 'affected', '--target=test', '--headless']
    entrypoint: 'npx'

  # Step 4: Validate Terraform configuration
  - name: 'hashicorp/terraform:1.5.7'
    id: 'Terraform Validate'
    entrypoint: 'sh'
    args:
      - -c
      - |
        cd infra/terraform
        terraform init
        terraform validate

  # Step 5: Build the Docker container for the agent-runner service
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Agent Container'
    args:
      - 'build'
      - '-t'
      - 'asia-southeast1-docker.pkg.dev/$PROJECT_ID/agent-services/agent-runner:${_SHORT_SHA}'
      - '.'
      - '-f'
      - 'apps/agents/Dockerfile'

  # Step 6: Scan container for vulnerabilities with Trivy
  - name: 'aquasec/trivy:latest'
    id: 'Scan Container Image'
    args: ['image', '--exit-code', '1', '--severity', 'HIGH,CRITICAL', 'asia-southeast1-docker.pkg.dev/$PROJECT_ID/agent-services/agent-runner:${_SHORT_SHA}']
    entrypoint: 'trivy'

  # Step 7: Push the container image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Container Image'
    args: ['push', 'asia-southeast1-docker.pkg.dev/$PROJECT_ID/agent-services/agent-runner:${_SHORT_SHA}']

  # Step 8: Deploy the event-parser Cloud Function
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Cloud Function'
    args:
      - 'functions'
      - 'deploy'
      - 'event-parser'
      - '--project=$PROJECT_ID'
      - '--region=asia-southeast1'
      - '--trigger-topic=dulce.agents'
      - '--runtime=nodejs20'
      - '--source=apps/event-parser'
      - '--entry-point=parseAgentEvent'
      - '--service-account=event-parser-sa@$PROJECT_ID.iam.gserviceaccount.com'
    entrypoint: 'gcloud'

  # Step 9: Deploy the agent-runner service to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Agent Service'
    args:
      - 'run'
      - 'deploy'
      - 'agent-runner'
      - '--project=$PROJECT_ID'
      - '--region=asia-southeast1'
      - '--image=asia-southeast1-docker.pkg.dev/$PROJECT_ID/agent-services/agent-runner:${_SHORT_SHA}'
      - '--platform=managed'
      - '--no-allow-unauthenticated'
      - '--service-account=agent-runner-sa@$PROJECT_ID.iam.gserviceaccount.com'
      - '--set-env-vars=GCP_PROJECT_ID=$PROJECT_ID,DULCE_AGENTS_TOPIC=dulce.agents,DULCE_AGENT_RUNS_TABLE=dulce.agent_runs'
    entrypoint: 'gcloud'

# Define the images to be pushed to the Artifact Registry.
images:
  - 'asia-southeast1-docker.pkg.dev/$PROJECT_ID/agent-services/agent-runner:${_SHORT_SHA}'

# Configure the build to use a larger machine type.
options:
  machineType: 'E2_HIGHCPU_8'
