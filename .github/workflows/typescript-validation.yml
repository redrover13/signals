name: TypeScript Validation
permissions:
  contents: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  typescript-check:
    name: TypeScript Compilation & Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript compilation check
        run: |
          echo "üîç Running TypeScript compilation check..."
          npx tsc --noEmit --skipLibCheck
          echo "‚úÖ TypeScript compilation successful"

              echo "üîç Building TypeScript project references..."
              npx tsc -b tsconfig.references.json --listFilesOnly
              echo "‚úÖ TypeScript project references validation successful"
          npx tsc -b tsconfig.references.json --dry
          echo "‚úÖ TypeScript project references validation successful"

      - name: TypeScript strict checks
        run: |
          echo "üîç Running strict TypeScript checks..."
          npx tsc --noEmit --strict --noImplicitAny --noImplicitReturns --noFallthroughCasesInSwitch
          echo "‚úÖ Strict TypeScript checks passed"

      - name: Check for TypeScript issues
        run: |
          echo "üîç Analyzing TypeScript issues..."
          if [ -f "tools/scripts/check-typescript-issues.ts" ]; then
            npx tsx tools/scripts/check-typescript-issues.ts
          else
            echo "üìù TypeScript issues checker not found, skipping"
          fi

  lint-typescript:
    name: ESLint TypeScript Rules
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint on TypeScript files
        run: |
          echo "üîç Running ESLint on TypeScript files..."
          npx eslint "**/*.{ts,tsx}" --max-warnings 0 --format=compact
          echo "‚úÖ ESLint TypeScript validation successful"

  type-coverage:
    name: TypeScript Type Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install type-coverage
        run: pnpm add -D -w type-coverage

      - name: Check type coverage
        run: |
          echo "üîç Checking TypeScript type coverage..."
          npx type-coverage --detail --at-least 85 --ignore-files "**/*.spec.ts" "**/*.test.ts" "**/*.d.ts"
          echo "‚úÖ Type coverage check completed"

  deadcode-detection:
    name: Dead Code Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install ts-prune
        run: pnpm add -D -w ts-prune

      - name: Detect unused exports
        run: |
          echo "üîç Detecting unused exports..."
          npx ts-prune --error || echo "üìù Some unused exports detected (review recommended)"
          echo "‚úÖ Dead code detection completed"