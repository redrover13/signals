import { BigQueryLogger } from './bigquery-logger';

export enum ErrorCategory {
  DATABASE = 'database',
  NETWORK = 'network',
  AUTHENTICATION = 'authentication',
  VALIDATION = 'validation',
  INTERNAL = 'internal',
  EXTERNAL_SERVICE = 'external_service',
  PERMISSIONS = 'permissions',
  RESOURCE_NOT_FOUND = 'resource_not_found',
  TIMEOUT = 'timeout',
  UNKNOWN = 'unknown'
}

export enum ErrorSeverity {
  CRITICAL = 'critical',
  ERROR = 'error',
  WARNING = 'warning',
  INFO = 'info'
}

export interface ErrorOptions {
  category?: ErrorCategory;
  severity?: ErrorSeverity;
  context?: Record<string, any>;
  originalError?: Error;
  retryable?: boolean;
  retryDelay?: number;
  userMessage?: string;
}

export interface AppError extends Error {
  category: ErrorCategory;
  severity: ErrorSeverity;
  context: Record<string, any>;
  originalError?: Error;
  retryable: boolean;
  retryDelay?: number;
  userMessage?: string;
}

function isRetryableError(category: ErrorCategory): boolean {
  return [
    ErrorCategory.DATABASE,
    ErrorCategory.NETWORK,
    ErrorCategory.EXTERNAL_SERVICE,
    ErrorCategory.TIMEOUT
  ].includes(category);
}

function getLogLevel(severity: ErrorSeverity): string {
  switch (severity) {
    case ErrorSeverity.CRITICAL:
      return 'error';
    case ErrorSeverity.ERROR:
      return 'error';
    case ErrorSeverity.WARNING:
      return 'warn';
    case ErrorSeverity.INFO:
      return 'info';
    default:
      return 'error';
  }
}

export function createError(
  message: string,
  options: ErrorOptions = {}
): AppError {
  const {
    category = ErrorCategory.UNKNOWN,
    severity = ErrorSeverity.ERROR,
    context = {},
    originalError,
    retryable = isRetryableError(category),
    retryDelay,
    userMessage = 'An error occurred. Please try again later.'
  } = options;

  const error = new Error(message) as AppError;
  error.name = 'AppError';
  
  if (error) {
    error.category = category;
    error.severity = severity;
    error.context = {
      ...context,
      timestamp: new Date()
    };
    error.originalError = originalError;
    error.retryable = isRetryableError(category);
    error.userMessage = userMessage;
  }

  return error;
}

export function logError(error: AppError, logger?: BigQueryLogger): void {
  const logLevel = getLogLevel(error.severity || 'error');
  
  // Log to console
  console[logLevel](`[${error.category}] ${error.message}`, {
    severity: error.severity,
    context: error.context,
    stack: error.stack
  });

  // Log to BigQuery if logger provided
  if (logger) {
    logger.log({
      message: error.message,
      severity: error.severity,
      category: error.category,
      context: error.context,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
  }
}

export function handleError(error: AppError, logger?: BigQueryLogger): void {
  logError(error, logger);
  
  // Add additional error handling logic here
  // For example, sending to error monitoring service
}
