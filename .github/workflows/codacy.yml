# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '35 1 * * 5'

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # needed later by the upload job
      actions: read # only required for a private repository by github/codeql-action/upload-sarif
    name: Codacy Security Scan (generate SARIF)
    runs-on: ubuntu-latest
    outputs:
      sarif-files: ${{ steps.split.outputs.files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm and Node.js
        uses: pnpm/action-setup@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install Prettier globally
        run: pnpm add -g prettier

      - name: Display Node.js and PNPM versions
        run: |
          node -v
          pnpm -v
          prettier --version

      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          gh-code-scanning-compat: true
          max-allowed-issues: 2147483647

      - name: Split SARIF into one-run files
        id: split
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p sarif-split
          runs=$(jq '.runs | length' results.sarif)
          if [ "$runs" = "0" ]; then echo "No SARIF runs found"; echo "files=[]" >> "$GITHUB_OUTPUT"; exit 0; fi
          files=()
          for i in $(seq 0 $((runs-1))); do
            tool=$(jq -r ".runs[$i].tool.driver.name" results.sarif | tr ' /' '__')
            out="sarif-split/${tool}.sarif"
            jq "{version: .version, runs: [ .runs[$i] ]}" results.sarif > "$out"
            files+=("$out")
          done
          printf 'files=%s\n' "$(printf '%s\n' "${files[@]}" | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"

      - name: Upload split SARIF as artifact (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: sarif-split
          path: sarif-split/*.sarif

  upload-sarif:
    name: Upload SARIF to Code Scanning
    needs: codacy-security-scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJSON(needs.codacy-security-scan.outputs.sarif-files) }}
    steps:
      - name: Download sarif-split artifact
        uses: actions/download-artifact@v4
        with:
          name: sarif-split
          path: sarif-split

      - name: Derive category from filename
        id: meta
        shell: bash
        run: |
          base=$(basename "${{ matrix.file }}")
          echo "cat=${base%.sarif}" >> "$GITHUB_OUTPUT"

      - name: Upload SARIF results file per category
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.file }}
          category: ${{ steps.meta.outputs.cat }}
