#!/usr/bin/env ts-node
/**
 * @fileoverview OpenTelemetry Demo Script
 * 
 * This script demonstrates the OpenTelemetry instrumentation capabilities
 * for the Dulce de Saigon F&B Data Platform.
 * 
 * @author Dulce de Saigon Engineering
 * @copyright Copyright (c) 2025 Dulce de Saigon
 * @license MIT
 */

import { 
  initializeOpenTelemetry, 
  withSpan, 
  logEvent, 
  instrument,
  shutdownOpenTelemetry 
} from '../libs/utils/monitoring/src/lib/otel-config';
import { BigQueryLogger } from '../libs/utils/monitoring/src/lib/bigquery-logger';
import { generateDashboardTemplate } from '../apps/looker-dashboards/src/lib/dashboard-templates';
import { generateMonitoringQuery } from '../apps/looker-dashboards/src/lib/monitoring-queries';

/**
 * Demo: Basic OpenTelemetry setup and instrumentation
 */
async function demoBasicInstrumentation() {
  console.log('üîß Demo: Basic OpenTelemetry Instrumentation');
  
  // Initialize OpenTelemetry
  await initializeOpenTelemetry({
    serviceName: 'demo-agent',
    serviceVersion: '1.0.0',
    gcpProjectId: process.env['GCP_PROJECT_ID'] || 'demo-project',
    enableAutoInstrumentation: true,
    enableCustomExporter: false, // Disable for demo
    enableBigQueryLogs: false,   // Disable for demo
  });

  // Demo: Manual span creation
  const result1 = await withSpan('demo-operation', async (span) => {
    span.setAttributes({
      'demo.type': 'basic',
      'demo.version': '1.0',
    });

    // Simulate some work
    await new Promise(resolve => setTimeout(resolve, 100));
    
    return 'Operation completed successfully';
  });

  console.log('‚úÖ Manual span result:', result1);

  // Demo: Function instrumentation
  const originalFunction = async (input: string) => {
    await new Promise(resolve => setTimeout(resolve, 50));
    return `Processed: ${input}`;
  };

  const instrumentedFunction = instrument('demo-function', originalFunction, {
    attributes: { 'function.type': 'demo' }
  });

  const result2 = await instrumentedFunction('test-data');
  console.log('‚úÖ Instrumented function result:', result2);

  // Demo: Event logging
  await logEvent('demo_event', {
    eventType: 'user_action',
    action: 'view_menu',
    restaurantId: 'demo-restaurant-123',
    userId: 'demo-user-456',
  });

  console.log('‚úÖ Event logged successfully');
}

/**
 * Demo: F&B specific use cases
 */
async function demoFnBUseCases() {
  console.log('\nüçΩÔ∏è  Demo: F&B Specific Use Cases');

  // Demo: Restaurant order processing
  await withSpan('process-order', async (span) => {
    const orderId = 'order-' + Date.now();
    
    span.setAttributes({
      'order.id': orderId,
      'restaurant.id': 'restaurant-123',
      'order.item_count': 3,
      'order.total_amount': 45.99,
    });

    // Simulate order processing steps
    await withSpan('validate-order', async () => {
      await new Promise(resolve => setTimeout(resolve, 20));
    });

    await withSpan('inventory-check', async () => {
      await new Promise(resolve => setTimeout(resolve, 30));
    });

    await withSpan('payment-processing', async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
    });

    await logEvent('order_processed', {
      orderId,
      restaurantId: 'restaurant-123',
      totalAmount: 45.99,
      items: [
        { id: 'item-1', name: 'Pho Bo', price: 15.99 },
        { id: 'item-2', name: 'Banh Mi', price: 12.00 },
        { id: 'item-3', name: 'Vietnamese Coffee', price: 8.00 }
      ]
    });

    console.log('‚úÖ Order processed:', orderId);
  });

  // Demo: Menu recommendation
  await withSpan('generate-recommendations', async (span) => {
    span.setAttributes({
      'user.id': 'user-789',
      'restaurant.id': 'restaurant-123',
      'recommendation.type': 'popular_items',
    });

    const recommendations = [
      { id: 'item-5', name: 'Bun Cha', score: 0.95 },
      { id: 'item-8', name: 'Goi Cuon', score: 0.87 },
      { id: 'item-12', name: 'Cao Lau', score: 0.82 }
    ];

    await logEvent('recommendations_generated', {
      userId: 'user-789',
      restaurantId: 'restaurant-123',
      recommendations,
      algorithmVersion: '2.1.0'
    });

    console.log('‚úÖ Recommendations generated:', recommendations.length);
  });
}

/**
 * Demo: BigQuery logging
 */
async function demoBigQueryLogging() {
  console.log('\nüìä Demo: BigQuery Logging');

  if (!process.env['GCP_PROJECT_ID']) {
    console.log('‚ö†Ô∏è  Skipping BigQuery demo - GCP_PROJECT_ID not set');
    return;
  }

  const logger = new BigQueryLogger({
    projectId: process.env['GCP_PROJECT_ID'],
    datasetId: 'demo_logs',
    tableId: 'demo_trace_logs',
  });

  // Note: In a real environment, you would call logger.initialize()
  console.log('‚úÖ BigQuery logger created (not initialized for demo)');

  // Demo log entries (not actually sent to BigQuery in demo)
  const demoEntries = [
    {
      timestamp: new Date(),
      level: 'info' as const,
      service: 'demo-agent',
      event: 'user_interaction',
      data: {
        action: 'view_menu',
        restaurantId: 'restaurant-123',
        userId: 'user-456'
      }
    },
    {
      timestamp: new Date(),
      level: 'info' as const,
      service: 'demo-agent',
      event: 'performance_metric',
      data: {
        operation: 'menu_recommendation',
        duration_ms: 150,
        success: true
      }
    }
  ];

  console.log('üìù Demo log entries prepared:', demoEntries.length);
}

/**
 * Demo: Dashboard templates
 */
async function demoDashboardTemplates() {
  console.log('\nüìà Demo: Dashboard Templates');

  // Generate dashboard template
  const template = generateDashboardTemplate({
    projectId: 'demo-project',
    datasetId: 'demo_logs',
    tableId: 'demo_trace_logs',
    dashboardName: 'Demo Agent Monitoring'
  });

  console.log('‚úÖ Dashboard template generated');
  console.log('üìä Dashboard name:', template.name);
  console.log('üìä Number of pages:', template.pages.length);
  console.log('üìä Total charts:', template.pages.reduce((sum: number | undefined, page: any) => sum + page.charts.length, 0));

  // Generate monitoring queries
  const healthQuery = generateMonitoringQuery('healthScore', {
    projectId: 'demo-project',
    datasetId: 'demo_logs',
    tableId: 'demo_trace_logs',
    timeRange: '24h'
  });

  console.log('‚úÖ Health score query generated (length:', healthQuery.length, 'chars)');

  // Show sample query excerpt
  const queryExcerpt = healthQuery.substring(0, 200) + '...';
  console.log('üìù Query excerpt:', queryExcerpt);
}

/**
 * Demo: Error handling and compliance
 */
async function demoErrorHandlingAndCompliance() {
  console.log('\nüõ°Ô∏è  Demo: Error Handling and Compliance');

  // Demo: Error handling in spans
  try {
    await withSpan('demo-error-operation', async (span) => {
      span.setAttributes({
        'operation.type': 'demo_error',
        'demo.will_fail': true,
      });

      // Simulate an error
      throw new Error('Demo error for testing');
    });
  } catch (error) {
    console.log('‚úÖ Error properly caught and logged:', ((error as any)?.message || "Unknown error"));
  }

  // Demo: Compliance logging
  await logEvent('compliance_check', {
    dataLocation: 'vietnam-southeast1',
    complianceMarker: 'GDPR-VIETNAM-COMPLIANT',
    userConsent: true,
    dataRetentionDays: 90,
    processingPurpose: 'service_improvement'
  });

  console.log('‚úÖ Compliance event logged');

  // Demo: Vietnamese specific logging
  await logEvent('vietnamese_data_processing', {
    region: 'vietnam-southeast1',
    language: 'vi-VN',
    localTime: new Date().toLocaleString('vi-VN'),
    currency: 'VND',
    dataSubject: 'vietnamese_citizen'
  });

  console.log('‚úÖ Vietnamese-specific data processing logged');
}

/**
 * Main demo function
 */
async function runDemo() {
  console.log('üéØ OpenTelemetry Demo for Dulce de Saigon F&B Platform');
  console.log('=' .repeat(60));

  try {
    await demoBasicInstrumentation();
    await demoFnBUseCases();
    await demoBigQueryLogging();
    await demoDashboardTemplates();
    await demoErrorHandlingAndCompliance();

    console.log('\nüéâ Demo completed successfully!');
    console.log('=' .repeat(60));
    
  } catch (error) {
    console.error('‚ùå Demo failed:', error);
  } finally {
    // Clean up
    await shutdownOpenTelemetry();
    console.log('üîÑ OpenTelemetry shutdown complete');
  }
}

// Run the demo if this script is executed directly
if (require.main === module) {
  runDemo().catch(console.error);
}

export { runDemo };