name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Lint
        run: pnpm nx lint

      - name: Run Tests
        run: pnpm nx test

      - name: Run Type Check
        run: pnpm nx affected --target=type-check --parallel

      - name: Run Static Analysis (SAST) on AI-Generated Code
        run: |
          # This is a placeholder. Replace with actual SAST tool commands.
          # Example using Semgrep (requires Semgrep CLI to be installed/available)
          # find . -type f -name "*.ts" -exec grep -l "// AI-GENERATED" {} + | xargs semgrep --config=auto
          echo "Running SAST on AI-generated code sections..."
          # For demonstration, we'll just list files with AI-GENERATED tag
          grep -r "// AI-GENERATED" . || true

  terraform-plan:
    runs-on: ubuntu-latest
    needs: build-test-lint
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Terraform Init
        run: |
          cd infra/terraform/bigquery && terraform init
          cd ../functions && terraform init
          cd ../vertex-agents && terraform init
          cd ../looker && terraform init

      - name: Terraform Plan
        run: |
          cd infra/terraform/bigquery && terraform plan -out=tfplan_bigquery
          cd ../functions && terraform plan -out=tfplan_functions
          cd ../vertex-agents && terraform plan -out=tfplan_vertex_agents
          cd ../looker && terraform plan -out=tfplan_looker

      - name: Upload Terraform Plan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plans
          path: |
            infra/terraform/bigquery/tfplan_bigquery
            infra/terraform/functions/tfplan_functions
            infra/terraform/vertex-agents/tfplan_vertex_agents
            infra/terraform/looker/tfplan_looker

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: production
    if: github.ref == 'refs/heads/main' # Only apply to main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Download Terraform Plan Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform-plans
          path: .

      - name: Terraform Apply
        run: |
          cd infra/terraform/bigquery && terraform apply tfplan_bigquery
          cd ../functions && terraform apply tfplan_functions
          cd ../vertex-agents && terraform apply tfplan_vertex_agents
          cd ../looker && terraform apply tfplan_looker

  deploy-cloud-functions:
    runs-on: ubuntu-latest
    needs: terraform-apply
    environment: production
    if: github.ref == 'refs/heads/main' # Only deploy to main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Deploy Social API Function
        uses: google-github-actions/deploy-cloudfunctions@v2
        with:
          name: social-api
          runtime: nodejs20
          entry_point: main
          source_dir: apps/cloud-functions/social-api
          project_id: ${{ env.GCP_PROJECT_ID }}
          region: ${{ env.GCP_REGION }}

      - name: Deploy CRM API Function
        uses: google-github-actions/deploy-cloudfunctions@v2
        with:
          name: crm-api
          runtime: nodejs20
          entry_point: main
          source_dir: apps/cloud-functions/crm-api
          project_id: ${{ env.GCP_PROJECT_ID }}
          region: ${{ env.GCP_REGION }}

      - name: Deploy CMS API Function
        uses: google-github-actions/deploy-cloudfunctions@v2
        with:
          name: cms-api
          runtime: nodejs20
          entry_point: main
          source_dir: apps/cloud-functions/cms-api
          project_id: ${{ env.GCP_PROJECT_ID }}
          region: ${{ env.GCP_REGION }}

      - name: Deploy Reviews API Function
        uses: google-github-actions/deploy-cloudfunctions@v2
        with:
          name: reviews-api
          runtime: nodejs20
          entry_point: main
          source_dir: apps/cloud-functions/reviews-api
          project_id: ${{ env.GCP_PROJECT_ID }}
          region: ${{ env.GCP_REGION }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-cloud-functions
    environment: production
    if: github.ref == 'refs/heads/main' # Only deploy to main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Frontend
        run: pnpm nx build frontend-agents

      - name: Deploy to Google Cloud Run (Example)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: frontend-agents
          image: gcr.io/${{ env.GCP_PROJECT_ID }}/frontend-agents:${{ github.sha }}
          region: ${{ env.GCP_REGION }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          # Add other Cloud Run specific configurations as needed

  deploy-agents:
    runs-on: ubuntu-latest
    needs: deploy-frontend # Assuming agents might depend on frontend or functions
    environment: production
    if: github.ref == 'refs/heads/main' # Only deploy to main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Build Agents
        run: pnpm nx build bq-agent looker-agent crm-agent content-agent reviews-agent gemini-orchestrator

      - name: Deploy Agents (Placeholder - Specific deployment will vary)
        run: |
          echo "Deploying agents... This step requires specific deployment logic for Vertex AI Agents or other agent hosting platforms."
          echo "Refer to GCP documentation for deploying Vertex AI Agents."
          # Example: gcloud ai-platform agents deploy ...