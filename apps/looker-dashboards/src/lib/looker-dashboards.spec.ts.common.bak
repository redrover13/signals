import { lookerDashboards } from './looker-dashboards';
import { 
  AGENT_MONITORING_DASHBOARD,
  REALTIME_DASHBOARD,
  generateDashboardTemplate,
  exportDashboardTemplate
} from './dashboard-templates';
import { 
  generateMonitoringQuery,
  PERFORMANCE_QUERIES,
  FNB_ANALYTICS_QUERIES,
  MONITORING_QUERY_SETS
} from './monitoring-queries';

describe('lookerDashboards', () => {
  it('should work', () => {
    expect(lookerDashboards()).toEqual('looker-dashboards');
  });

  describe('Dashboard Templates', () => {
    it('should have valid agent monitoring dashboard structure', () => {
      expect(AGENT_MONITORING_DASHBOARD).toBeDefined();
      expect(AGENT_MONITORING_DASHBOARD.name).toBe('Dulce de Saigon - Agent Monitoring Dashboard');
      expect(AGENT_MONITORING_DASHBOARD.dataSources).toHaveLength(2);
      expect(AGENT_MONITORING_DASHBOARD.pages).toHaveLength(4);
      expect(AGENT_MONITORING_DASHBOARD.filters).toHaveLength(2);
    });

    it('should have valid realtime dashboard structure', () => {
      expect(REALTIME_DASHBOARD).toBeDefined();
      expect(REALTIME_DASHBOARD.name).toBe('Real-time Agent Performance');
      expect(REALTIME_DASHBOARD.refreshInterval).toBe('30s');
      expect(REALTIME_DASHBOARD.charts).toHaveLength(2);
    });

    it('should generate customized dashboard template', () => {
      const options = {
        projectId: 'test-project',
        datasetId: 'test-dataset',
        tableId: 'test-table',
        dashboardName: 'Custom Dashboard'
      };

      const template = generateDashboardTemplate(options);

      expect(template.name).toBe('Custom Dashboard');
      expect(JSON.stringify(template)).toContain('test-project');
      expect(JSON.stringify(template)).toContain('test-dataset');
      expect(JSON.stringify(template)).toContain('test-table');
    });

    it('should export dashboard template as JSON', () => {
      const exported = exportDashboardTemplate(AGENT_MONITORING_DASHBOARD, 'json');
      const parsed = JSON.parse(exported);
      
      expect(parsed.name).toBe(AGENT_MONITORING_DASHBOARD.name);
      expect(parsed.pages).toHaveLength(4);
    });

    it('should export dashboard template as Looker format', () => {
      const exported = exportDashboardTemplate(AGENT_MONITORING_DASHBOARD, 'looker');
      const parsed = JSON.parse(exported);
      
      expect(parsed.dashboardName).toBe(AGENT_MONITORING_DASHBOARD.name);
      expect(parsed.dataConnectors).toBeDefined();
      expect(parsed.charts).toBeDefined();
      expect(parsed.filters).toBeDefined();
    });
  });

  describe('Monitoring Queries', () => {
    const testParams = {
      projectId: 'test-project',
      datasetId: 'test-dataset',
      tableId: 'test-table',
      timeRange: '24h' as const,
      service: 'test-service'
    };

    it('should generate health score query', () => {
      const query = PERFORMANCE_QUERIES.healthScore(testParams);
      
      expect(query).toContain('test-project.test-dataset.test-table');
      expect(query).toContain('24h');
      expect(query).toContain('test-service');
      expect(query).toContain('health_score');
    });

    it('should generate request throughput query', () => {
      const query = PERFORMANCE_QUERIES.requestThroughput(testParams);
      
      expect(query).toContain('requests_per_minute');
      expect(query).toContain('TIMESTAMP_TRUNC');
      expect(query).toContain('24h');
    });

    it('should generate F&B analytics queries', () => {
      const restaurantQuery = FNB_ANALYTICS_QUERIES.restaurantInteractions(testParams);
      const menuQuery = FNB_ANALYTICS_QUERIES.menuItemPopularity(testParams);
      
      expect(restaurantQuery).toContain('restaurant_id');
      expect(restaurantQuery).toContain('interaction_type');
      expect(menuQuery).toContain('menu_item_id');
    });

    it('should generate query using helper function', () => {
      const query = generateMonitoringQuery('healthScore', testParams);
      
      expect(query).toContain('health_score');
      expect(query).toContain('test-project');
    });

    it('should throw error for unknown query type', () => {
      expect(() => {
        generateMonitoringQuery('unknownQuery' as any, testParams);
      }).toThrow('Unknown query type: unknownQuery');
    });

    it('should have predefined query sets', () => {
      expect(MONITORING_QUERY_SETS.agentHealth).toContain('healthScore');
      expect(MONITORING_QUERY_SETS.fmbAnalytics).toContain('restaurantInteractions');
      expect(MONITORING_QUERY_SETS.traceAnalysis).toContain('traceCompletionRates');
      expect(MONITORING_QUERY_SETS.compliance).toContain('dataProcessingCompliance');
    });
  });

  describe('Dashboard Integration', () => {
    it('should support Vietnamese data compliance requirements', () => {
      const dashboard = AGENT_MONITORING_DASHBOARD;
      
      expect(dashboard.metadata?.compliance).toBe('GDPR-Vietnam Compatible');
      expect(dashboard.metadata?.region).toBe('Asia-Southeast1');
      
      // Check compliance page exists
      const compliancePage = dashboard.pages.find(page => page.name === 'Compliance & Security');
      expect(compliancePage).toBeDefined();
      expect(compliancePage?.charts.some(chart => chart.title.includes('Vietnam Data Law'))).toBe(true);
    });

    it('should include F&B specific metrics', () => {
      const dashboard = AGENT_MONITORING_DASHBOARD;
      
      // Check F&B operations page exists
      const fnbPage = dashboard.pages.find(page => page.name === 'F&B Operations');
      expect(fnbPage).toBeDefined();
      expect(fnbPage?.charts.some(chart => chart.title.includes('Restaurant'))).toBe(true);
      expect(fnbPage?.charts.some(chart => chart.title.includes('Menu'))).toBe(true);
    });

    it('should have proper filter configuration', () => {
      const dashboard = AGENT_MONITORING_DASHBOARD;
      
      const timeFilter = dashboard.filters.find(filter => filter.id === 'time_range');
      const serviceFilter = dashboard.filters.find(filter => filter.id === 'service_filter');
      
      expect(timeFilter).toBeDefined();
      expect(timeFilter?.defaultValue).toBe('LAST_24_HOURS');
      expect(serviceFilter).toBeDefined();
      expect(serviceFilter?.values).toContain('dulce-de-saigon-agent');
    });
  });
});
