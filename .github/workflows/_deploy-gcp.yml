name: Deploy to Google Cloud

on:
  workflow_run:
    workflows: ["Dulce de Saigon - Complete CI/CD Pipeline"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      services:
        description: 'Services to deploy (comma-separated or "all")'
        required: true
        default: 'all'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: asia-southeast1 # Singapore, closest to Vietnam
  ARTIFACT_REGISTRY: asia-southeast1-docker.pkg.dev

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy-list: ${{ steps.deploy-list.outputs.services }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'libs/**'
            web:
              - 'apps/web/**'
              - 'libs/**'
            agents:
              - 'apps/agents/**'
              - 'libs/**'
            infra:
              - 'infra/terraform/**'
            eventparser:
              - 'apps/event-parser/**'
            legacyeventparser:
              - 'apps/legacy_event_parser/**'

      - name: Determine deployment list
        id: deploy-list
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.services }}" == "all" ]]; then
              echo "services=api,web,agents,event-parser,legacy-event-parser,infra" >> $GITHUB_OUTPUT
            else
              echo "services=${{ github.event.inputs.services }}" >> $GITHUB_OUTPUT
            fi
          else
            services=""
            [[ "${{ steps.changes.outputs.api }}" == "true" ]] && services="${services}api,"
            [[ "${{ steps.changes.outputs.web }}" == "true" ]] && services="${services}web,"
            [[ "${{ steps.changes.outputs.agents }}" == "true" ]] && services="${services}agents,"
            [[ "${{ steps.changes.outputs.eventparser }}" == "true" ]] && services="${services}event-parser,"
            [[ "${{ steps.changes.outputs.legacyeventparser }}" == "true" ]] && services="${services}legacy-event-parser,"
            [[ "${{ steps.changes.outputs.infra }}" == "true" ]] && services="${services}infra,"
            services=${services%,} # Remove trailing comma
            echo "services=${services}" >> $GITHUB_OUTPUT
          fi

  deploy-function:
    name: Deploy Cloud Function - ${{ matrix.function.name }}
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: contains(needs.detect-changes.outputs.deploy-list, matrix.function.name)
    strategy:
      matrix:
        function:
          - { name: 'event-parser', topic: 'agent-events', entry: 'parseAgentEvent' }
          - { name: 'legacy-event-parser', topic: 'legacy-events', entry: 'legacyEventParser' }
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      - name: Deploy Cloud Function
        run: |
          gcloud functions deploy ${{ matrix.function.entry }} \
            --region=${{ env.GCP_REGION }} \
            --runtime=nodejs18 \
            --trigger-topic=${{ matrix.function.topic }} \
            --entry-point=${{ matrix.function.entry }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --source=apps/${{ matrix.function.name }} \
            --set-env-vars=NODE_ENV=production

  deploy-infra:
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://console.cloud.google.com/
    concurrency:
      group: deploy-infra-${{ github.event.inputs.environment || 'staging' }}
      cancel-in-progress: true
    name: Deploy GCP Infrastructure
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: contains(needs.detect-changes.outputs.deploy-list, 'infra')
    outputs:
       apply_output: ${{ steps.apply.outputs.stdout }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
      - name: Initialize Terraform
        id: init
        run: |
          TF_BACKEND_BUCKET="${{ secrets.TERRAFORM_STATE_BUCKET }}"
          TF_BACKEND_PREFIX="terraform/state/${{ github.event.inputs.environment || 'staging' }}"
          terraform -chdir=infra/terraform init \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="prefix=$TF_BACKEND_PREFIX"
        env:
          TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Select or Create Terraform Workspace
        id: workspace
        run: |
          cd infra/terraform
          terraform workspace select ${{ github.event.inputs.environment || 'staging' }} || terraform workspace new ${{ github.event.inputs.environment || 'staging' }};
      - name: Apply Terraform Configuration
        id: apply
        run: |
          APPLY_OUTPUT=$(terraform -chdir=infra/terraform apply -auto-approve \
            -var-file="${{ github.event.inputs.environment || 'staging' }}.auto.tfvars" 2>&1)
          echo "$APPLY_OUTPUT"
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          echo "$APPLY_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}

  check-infra-changes:
    name: Check for Infrastructure Changes
    runs-on: ubuntu-latest
    needs: [deploy-infra]
    if: always() && needs.deploy-infra.result == 'success'
    outputs:
      infra_changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Check Terraform Output
        id: check
        run: |
          APPLY_OUTPUT="${{ needs.deploy-infra.outputs.apply_output }}"
          NO_CHANGES_MSG="No changes. Your infrastructure matches the configuration."
          if [[ "$APPLY_OUTPUT" == *"$NO_CHANGES_MSG"* ]]; then
            echo "No infrastructure changes detected."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Infrastructure changes detected."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  deploy-service:
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    concurrency:
      group: deploy-service-${{ matrix.service.name }}-${{ github.event.inputs.environment || 'staging' }}
      cancel-in-progress: true
    name: Deploy ${{ matrix.service.name }} Service
    runs-on: ubuntu-latest
    needs: [detect-changes, check-infra-changes]
    if: contains(needs.detect-changes.outputs.deploy-list, matrix.service.name) || needs.check-infra-changes.outputs.infra_changed == 'true'
    strategy:
      matrix:
        service:
          - name: 'api'
            dockerfile: 'apps/api/Dockerfile'
            cloud-run-service: 'dulce-api'
            service-account: 'dulce-api-sa'
            env-vars: 'NODE_ENV=production,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}'
            secrets: 'DATABASE_URL=dulce-db-url:latest'
            allow-unauthenticated: true
          - name: 'web'
            dockerfile: 'apps/web/Dockerfile'
            cloud-run-service: 'dulce-web'
            service-account: 'dulce-web-sa'
            env-vars: 'NODE_ENV=production,NEXT_PUBLIC_API_BASE=https://api.dulcedesaigon.vn'
            secrets: ''
            allow-unauthenticated: true
          - name: 'agents'
            dockerfile: 'apps/agents/Dockerfile'
            cloud-run-service: 'dulce-agents'
            service-account: 'dulce-agents-sa'
            env-vars: 'NODE_ENV=production,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}'
            secrets: 'AGENTS_API_KEY=agents-api-key:latest'
            allow-unauthenticated: false
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
      - name: Build and Push Docker Image
        run: |
          docker build -f ${{ matrix.service.dockerfile }} -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/dulce/${{ matrix.service.name }}:${{ github.sha }} -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/dulce/${{ matrix.service.name }}:latest .
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/dulce/${{ matrix.service.name }} --all-tags
      - name: Deploy to Cloud Run
        id: deploy_service
        run: |
          set -e
          gcloud run deploy ${{ matrix.service.cloud-run-service }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/dulce/${{ matrix.service.name }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --service-account ${{ matrix.service.service-account }}@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            ${{ matrix.service.env-vars != '' && format('--set-env-vars "{0}"', matrix.service.env-vars) || '' }} \
            ${{ matrix.service.secrets != '' && format('--set-secrets "{0}"', matrix.service.secrets) || '' }} \
            ${{ matrix.service.allow-unauthenticated && '--allow-unauthenticated' || '--no-allow-unauthenticated' }}
        continue-on-error: true
      - name: Rollback if unhealthy
        if: failure() && steps.deploy_service.outcome == 'failure'
        run: |
          echo "Rolling back ${{ matrix.service.name }} deployment..."
          gcloud run services update-traffic ${{ matrix.service.cloud-run-service }} --region ${{ env.GCP_REGION }} --to-latest

  update-traffic:
    name: Update Traffic Split
    runs-on: ubuntu-latest
    needs: [deploy-service]
    if: success()
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      - name: Gradual Traffic Migration
        run: |
          for service in dulce-api dulce-web dulce-agents; do
            if gcloud run services describe $service --region ${{ env.GCP_REGION }} >/dev/null 2>&1; then
              echo "Migrating traffic for $service"
              gcloud run services update-traffic $service \
                --region ${{ env.GCP_REGION}} \
                --to-revisions LATEST=100
            fi
          done

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [update-traffic]
    if: success()
    steps:
      - uses: actions/checkout@v4
      - name: Notify Monitoring
        run: |
          # Send deployment notification to monitoring systems
          curl -X POST https://monitoring.dulcedesaigon.vn/api/deployments \
            -H "Authorization: Bearer ${{ secrets.MONITORING_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "environment": "${{ github.event.inputs.environment || 'production' }}",
              "version": "${{ github.sha }}",
              "services": "${{ needs.detect-changes.outputs.deploy-list }}",
              "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"
            }'
      - name: Invalidate CDN Cache
        run: |
          # Clear CDN cache for updated content
          gcloud compute url-maps invalidate-cdn-cache dulce-web-lb \
            --path "/*" \
            --global
      - name: Run Smoke Tests
        run: |
          # Basic health checks
          curl -f https://api.dulcedesaigon.vn/health || exit 1
          curl -f https://dulcedesaigon.vn/api/health || exit 1