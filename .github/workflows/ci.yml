name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  CI: true
  NX_DAEMON: false
  NX_PARALLEL: 3

# Global permissions for the workflow
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write
  pull-requests: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # SETUP & DEPENDENCY MANAGEMENT
  # ============================================================================
  setup:
    name: Setup & Dependencies
    runs-on: ubuntu-latest
    outputs:
      affected-projects: ${{ steps.affected.outputs.projects }}
      has-affected: ${{ steps.affected.outputs.has-affected }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set Nx SHAs for affected detection
        uses: nrwl/nx-set-shas@v4

      - name: Detect affected projects
        id: affected
        run: |
          AFFECTED=$(pnpm nx show projects --affected --json 2>/dev/null || echo '[]')
          echo "projects=$AFFECTED" >> $GITHUB_OUTPUT
          if [ "$AFFECTED" != "[]" ] && [ "$AFFECTED" != "" ]; then
            echo "has-affected=true" >> $GITHUB_OUTPUT
          else
            echo "has-affected=false" >> $GITHUB_OUTPUT
          fi

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
            .nx/cache
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true' || github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies if cache miss
        run: pnpm install --frozen-lockfile

      # Secret scanning with secretlint
      - name: Secret scan
        run: |
          pnpm secretlint "**/*" --format json --output secretlint-results.json || true
          if [ -f secretlint-results.json ]; then
            cat secretlint-results.json
          fi

      # Dependency vulnerability scanning
      - name: Dependency audit
        run: |
          pnpm audit --audit-level=moderate --json > audit-results.json || true
          if [ -f audit-results.json ]; then
            cat audit-results.json
          fi

      # GitGuardian scanning for secrets
      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@v1.25.0
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        if: env.GITGUARDIAN_API_KEY != ''
        with:
          args: --all-policies --verbose

  # ============================================================================
  # CODE QUALITY & LINTING
  # ============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies if cache miss
        run: pnpm install --frozen-lockfile

      - name: Set Nx SHAs
        uses: nrwl/nx-set-shas@v4

      # Format checking
      - name: Format check
        run: pnpm nx format:check

      # Lint affected projects
      - name: Lint affected projects
        run: pnpm nx affected -t lint --parallel=3

      # Complexity analysis with PMD (if configured)
      - name: Code complexity analysis
        run: |
          if [ -f pmd.xml ]; then
            echo "Running PMD analysis..."
            # PMD analysis would go here
          fi
        continue-on-error: true

  # ============================================================================
  # TESTING
  # ============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies if cache miss
        run: pnpm install --frozen-lockfile

      - name: Set Nx SHAs
        uses: nrwl/nx-set-shas@v4

      # Unit tests with coverage
      - name: Run unit tests
        run: pnpm nx affected -t test --coverage --parallel=3

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: github.event_name == 'push'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/**/lcov.info
          flags: unittests
          name: codecov-umbrella

      # Upload coverage to Codacy
      - name: Upload coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        if: github.event_name == 'push'
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage/**/lcov.info
        continue-on-error: true

  # ============================================================================
  # BUILD & ARTIFACT CREATION
  # ============================================================================
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [setup, security, quality, test]
    if: needs.setup.outputs.has-affected == 'true'
    outputs:
      build-artifacts: ${{ steps.artifacts.outputs.paths }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies if cache miss
        run: pnpm install --frozen-lockfile

      - name: Set Nx SHAs
        uses: nrwl/nx-set-shas@v4

      # Build affected projects
      - name: Build affected projects
        run: pnpm nx affected -t build --parallel=3

      # Generate build artifacts list
      - name: Generate artifacts list
        id: artifacts
        run: |
          ARTIFACTS=$(find dist -type f -name "*.js" -o -name "*.json" -o -name "*.html" | jq -R -s -c 'split("\n")[:-1]')
          echo "paths=$ARTIFACTS" >> $GITHUB_OUTPUT

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            apps/*/dist/
          retention-days: 7
          compression-level: 6

  # ============================================================================
  # END-TO-END TESTING (DISABLED UNTIL PLAYWRIGHT IS CONFIGURED)
  # ============================================================================
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: false  # Disabled until Playwright is properly configured
    strategy:
      matrix:
        browser: [chromium, firefox]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies if cache miss
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E tests
        run: pnpm nx affected -t e2e --browser=${{ matrix.browser }}
        env:
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-${{ github.sha }}
          path: |
            test-results/
            playwright-report/
          retention-days: 3

  # ============================================================================
  # DEPLOYMENT TO GOOGLE CLOUD
  # ============================================================================
  deploy:
    name: Deploy to Google Cloud
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker asia-southeast1-docker.pkg.dev

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      # Deploy via Cloud Build
      - name: Deploy via Cloud Build
        run: |
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --substitutions=_GITHUB_SHA=${{ github.sha }},_GITHUB_REF=${{ github.ref }} \
            --timeout=1200s

      # Health check after deployment
      - name: Health check
        run: |
          sleep 30
          curl -f https://dulce-api-dot-${{ secrets.GCP_PROJECT_ID }}.asia-southeast1.run.app/health || exit 1

  # ============================================================================
  # RELEASE MANAGEMENT
  # ============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Semantic release
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: npx semantic-release

  # ============================================================================
  # NOTIFICATION & REPORTING
  # ============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [setup, security, quality, test, build, deploy, release]
    if: always()
    steps:
      - name: Notify Slack on failure
        if: failure() && vars.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on success
        if: success() && github.ref == 'refs/heads/main' && vars.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}

      # Update deployment status
      - name: Update deployment status
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment: 'production',
              description: 'Deployment ${{ job.status }}'
            });