name: Multi-Environment Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 4 * * 1' # Weekly on Monday at 4 AM UTC

permissions:
  contents: read
  checks: write

jobs:
  test-matrix:
    name: Test Node ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      STORE_PATH: ''
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20', '22']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            node-version: '18'
          - os: macos-latest
            node-version: '18'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: 10.0.0

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create .env.local for CI
        run: |
          cat > .env.local << EOL
          # API Environment Variables
          API_PORT=3333
          API_HOST=localhost
          API_PREFIX=/api
          API_CORS_ORIGIN=*

          # Agents Environment Variables
          AGENTS_PORT=3334
          AGENTS_HOST=localhost
          AGENTS_PREFIX=/agents
          AGENTS_CORS_ORIGIN=*

          # Web Environment Variables
          NEXT_PUBLIC_API_BASE=http://localhost:3333/api

          # Agent Frontend Environment Variables
          VITE_GEMINI_API_KEY=dummy-key
          VITE_GCP_PROJECT_ID=dummy-project
          VITE_FIREBASE_API_KEY=dummy-firebase-key
          VITE_FIREBASE_AUTH_DOMAIN=dummy-auth-domain
          VITE_FIREBASE_PROJECT_ID=dummy-project
          VITE_FIREBASE_STORAGE_BUCKET=dummy-storage
          VITE_FIREBASE_MESSAGING_SENDER_ID=dummy-sender
          VITE_FIREBASE_APP_ID=dummy-app-id
          EOL

      - name: Run type checking
        run: pnpm exec nx run-many -t type-check --all --parallel=3

      - name: Run linting
        run: pnpm exec nx run-many -t lint --all --parallel=3

      - name: Run unit tests
        run: pnpm exec nx run-many -t test --all --parallel=3 --coverage

      - name: Run build
        run: pnpm exec nx run-many -t build --all --parallel=3

      - name: Test MCP connectivity (Unix)
        if: runner.os != 'Windows'
        run: |
          timeout 30s pnpm mcp:health || echo "MCP health check timed out or failed"

      - name: Test MCP connectivity (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $job = Start-Job -ScriptBlock { pnpm mcp:health }
          if (Wait-Job $job -Timeout 30) {
            Receive-Job $job
          } else {
            Write-Host "MCP health check timed out or failed"
            Stop-Job $job
          }

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 7

  compatibility-check:
    name: Compatibility Check
    runs-on: ubuntu-latest
    env:
      STORE_PATH: ''
    needs: test-matrix
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: 10.0.0
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
          echo "" >> compatibility-report.md

          echo "## Node.js Version Support" >> compatibility-report.md
          echo "- **Required:** $(node -p "require('./package.json').engines?.node || 'not specified'")" >> compatibility-report.md
          echo "- **Tested:** 18.x, 20.x, 22.x" >> compatibility-report.md
          echo "" >> compatibility-report.md

          echo "## Operating System Support" >> compatibility-report.md
          echo "- **Ubuntu:** ✅ Tested" >> compatibility-report.md
          echo "- **Windows:** ✅ Tested" >> compatibility-report.md
          echo "- **macOS:** ✅ Tested" >> compatibility-report.md
          echo "" >> compatibility-report.md

      - name: Upload compatibility report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: compatibility-report
          path: compatibility-report.md
          retention-days: 30

  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    env:
      STORE_PATH: ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: 10.0.0
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks..."

          # Build time benchmark
          echo "Build performance:"
          time pnpm nx run-many -t build --all --parallel=3

          # Test execution time
          echo "Test performance:"
          time pnpm nx run-many -t test --all --parallel=3

      - name: Memory usage check
        run: |
          echo "Checking memory usage during build..."

          # Monitor memory usage during build
          (while true; do
            ps aux | grep -E "(node|pnpm)" | grep -v grep || true
            sleep 5
          done) &
          MONITOR_PID=$!

          pnpm nx build mcp

          kill $MONITOR_PID 2>/dev/null || true
