name: Multi-Environment Deployment

on:
  push:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

permissions:
  contents: read
  id-token: write
  deployments: write

concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || 'auto' }}
  cancel-in-progress: false

jobs:
  # ============================================================================
  # DETERMINE DEPLOYMENT ENVIRONMENT
  # ============================================================================
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should-deploy: ${{ steps.env.outputs.should-deploy }}
      gcp-project: ${{ steps.env.outputs.gcp-project }}
      region: ${{ steps.env.outputs.region }}
    steps:
      - name: Determine deployment environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ inputs.environment }}"
            SHOULD_DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENVIRONMENT="production"
            SHOULD_DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            ENVIRONMENT="staging"
            SHOULD_DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            ENVIRONMENT="staging"
            SHOULD_DEPLOY="true"
          else
            ENVIRONMENT="none"
            SHOULD_DEPLOY="false"
          fi
          
          # Set GCP project based on environment
          case $ENVIRONMENT in
            production)
              GCP_PROJECT="saigon-signals"
              REGION="asia-southeast1"
              ;;
            staging)
              GCP_PROJECT="saigon-signals-staging"
              REGION="asia-southeast1"
              ;;
            *)
              GCP_PROJECT=""
              REGION=""
              ;;
          esac
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "gcp-project=$GCP_PROJECT" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          
          echo "Deployment Environment: $ENVIRONMENT"
          echo "Should Deploy: $SHOULD_DEPLOY"
          echo "GCP Project: $GCP_PROJECT"

  # ============================================================================
  # PRE-DEPLOYMENT VALIDATION
  # ============================================================================
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should-deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Validate environment configuration
      - name: Validate environment configuration
        run: |
          echo "Validating ${{ needs.determine-environment.outputs.environment }} environment..."
          
          # Check required secrets
          REQUIRED_SECRETS=("GCP_PROJECT_ID" "WIF_PROVIDER" "WIF_SERVICE_ACCOUNT")
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "::error::Required secret $secret is not set"
              exit 1
            fi
          done
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          WIF_PROVIDER: ${{ secrets.WIF_PROVIDER }}
          WIF_SERVICE_ACCOUNT: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      # Run smoke tests
      - name: Run smoke tests
        run: |
          pnpm nx run-many -t test --projects=tag:smoke --parallel=3
        continue-on-error: true

      # Security scan before deployment
      - name: Final security scan
        run: |
          pnpm secretlint "**/*" --format json || true
          pnpm audit --audit-level=high || true

  # ============================================================================
  # BUILD FOR DEPLOYMENT
  # ============================================================================
  build-for-deployment:
    name: Build for Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, pre-deployment]
    if: needs.determine-environment.outputs.should-deploy == 'true'
    outputs:
      build-version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Generate build version
      - name: Generate build version
        id: version
        run: |
          VERSION="${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Build Version: $VERSION"

      # Build all applications
      - name: Build applications
        run: |
          pnpm nx run-many -t build --all --parallel=3
        env:
          NODE_ENV: production
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-build-${{ steps.version.outputs.version }}
          path: |
            dist/
            apps/*/dist/
            apps/*/Dockerfile
            cloudbuild.yaml
          retention-days: 30
          compression-level: 6

  # ============================================================================
  # DEPLOY TO GOOGLE CLOUD
  # ============================================================================
  deploy-to-gcp:
    name: Deploy to Google Cloud
    runs-on: ubuntu-latest
    needs: [determine-environment, build-for-deployment]
    if: needs.determine-environment.outputs.should-deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-build-${{ needs.build-for-deployment.outputs.build-version }}
          path: .

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.determine-environment.outputs.gcp-project }}

      # Configure Docker for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ needs.determine-environment.outputs.region }}-docker.pkg.dev

      # Create deployment record
      - name: Create deployment record
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.determine-environment.outputs.environment }}',
              description: 'Deploying to ${{ needs.determine-environment.outputs.environment }}',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      # Deploy via Cloud Build
      - name: Deploy via Cloud Build
        id: deploy
        run: |
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --substitutions=_GITHUB_SHA=${{ github.sha }},_GITHUB_REF=${{ github.ref }},_ENVIRONMENT=${{ needs.determine-environment.outputs.environment }},_BUILD_VERSION=${{ needs.build-for-deployment.outputs.build-version }} \
            --timeout=1800s \
            --region=${{ needs.determine-environment.outputs.region }}

      # Update deployment status to success
      - name: Update deployment status - Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment: '${{ needs.determine-environment.outputs.environment }}',
              description: 'Deployment successful',
              environment_url: 'https://dulce-api-dot-${{ needs.determine-environment.outputs.gcp-project }}.asia-southeast1.run.app'
            });

      # Update deployment status to failure
      - name: Update deployment status - Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              environment: '${{ needs.determine-environment.outputs.environment }}',
              description: 'Deployment failed'
            });

  # ============================================================================
  # POST-DEPLOYMENT VALIDATION
  # ============================================================================
  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-to-gcp]
    if: needs.determine-environment.outputs.should-deploy == 'true'
    steps:
      - name: Wait for deployment to stabilize
        run: sleep 60

      # Health checks
      - name: Health check - API
        run: |
          API_URL="https://dulce-api-dot-${{ needs.determine-environment.outputs.gcp-project }}.asia-southeast1.run.app"
          
          echo "Checking API health at $API_URL/health"
          
          for i in {1..5}; do
            if curl -f -s "$API_URL/health" > /dev/null; then
              echo "✅ API health check passed"
              break
            else
              echo "❌ API health check failed (attempt $i/5)"
              if [ $i -eq 5 ]; then
                exit 1
              fi
              sleep 30
            fi
          done

      # Performance validation
      - name: Performance validation
        run: |
          API_URL="https://dulce-api-dot-${{ needs.determine-environment.outputs.gcp-project }}.asia-southeast1.run.app"
          
          echo "Running performance validation..."
          
          # Simple response time check
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$API_URL/health")
          RESPONSE_TIME_MS=$(echo "$RESPONSE_TIME * 1000" | bc)
          
          echo "Response time: ${RESPONSE_TIME_MS}ms"
          
          # Fail if response time > 5 seconds
          if (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "❌ Response time too slow: ${RESPONSE_TIME_MS}ms"
            exit 1
          else
            echo "✅ Response time acceptable: ${RESPONSE_TIME_MS}ms"
          fi

      # Smoke tests against deployed environment
      - name: Smoke tests
        run: |
          echo "Running smoke tests against deployed environment..."
          
          API_URL="https://dulce-api-dot-${{ needs.determine-environment.outputs.gcp-project }}.asia-southeast1.run.app"
          
          # Test basic endpoints
          curl -f "$API_URL/health" || exit 1
          
          echo "✅ Smoke tests passed"

  # ============================================================================
  # ROLLBACK CAPABILITY
  # ============================================================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && needs.determine-environment.outputs.should-deploy == 'true'
    needs: [determine-environment, deploy-to-gcp, post-deployment]
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.determine-environment.outputs.gcp-project }}

      - name: Rollback Cloud Run services
        run: |
          echo "Rolling back Cloud Run services..."
          
          # Get previous revision for each service
          SERVICES=("dulce-api" "agent-runner")
          
          for service in "${SERVICES[@]}"; do
            echo "Rolling back $service..."
            
            # Get the previous revision
            PREVIOUS_REVISION=$(gcloud run revisions list \
              --service=$service \
              --region=${{ needs.determine-environment.outputs.region }} \
              --limit=2 \
              --format="value(metadata.name)" | tail -n 1)
            
            if [ -n "$PREVIOUS_REVISION" ]; then
              gcloud run services update-traffic $service \
                --to-revisions=$PREVIOUS_REVISION=100 \
                --region=${{ needs.determine-environment.outputs.region }}
              echo "✅ Rolled back $service to $PREVIOUS_REVISION"
            else
              echo "❌ No previous revision found for $service"
            fi
          done

  # ============================================================================
  # NOTIFICATION & REPORTING
  # ============================================================================
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [determine-environment, build-for-deployment, deploy-to-gcp, post-deployment]
    if: always() && needs.determine-environment.outputs.should-deploy == 'true'
    steps:
      - name: Notify Slack - Success
        if: success()
        if: vars.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚀 Deployment to ${{ needs.determine-environment.outputs.environment }} successful!
            
            Environment: ${{ needs.determine-environment.outputs.environment }}
            Version: ${{ needs.build-for-deployment.outputs.build-version }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}

      - name: Notify Slack - Failure
        if: failure()
        if: vars.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚨 Deployment to ${{ needs.determine-environment.outputs.environment }} failed!
            
            Environment: ${{ needs.determine-environment.outputs.environment }}
            Commit: ${{ github.sha }}
            Please check the logs and consider rollback if necessary.
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}

      # Create GitHub release for production deployments
      - name: Create GitHub Release
        if: success() && needs.determine-environment.outputs.environment == 'production'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build-for-deployment.outputs.build-version }}
          release_name: Production Release v${{ needs.build-for-deployment.outputs.build-version }}
          body: |
            ## Production Deployment
            
            **Version:** ${{ needs.build-for-deployment.outputs.build-version }}
            **Commit:** ${{ github.sha }}
            **Environment:** ${{ needs.determine-environment.outputs.environment }}
            **Deployed:** ${{ github.event.head_commit.timestamp }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false